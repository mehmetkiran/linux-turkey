# Generated by Django 2.1.5 on 2019-03-02 18:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('question', '0001_initial'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-Posta Adresi')),
                ('userAbout', models.TextField(blank=True, null=True, verbose_name='Hakkında')),
                ('profileImage', models.ImageField(blank=True, default='user/NewTux.svg', null=True, upload_to='user/', verbose_name='Profil Resmi')),
                ('userCountry', models.CharField(blank=True, max_length=200, null=True, verbose_name='Ulke')),
                ('userFacebook', models.CharField(blank=True, max_length=200, null=True, verbose_name='Facebook Adresi')),
                ('userTwitter', models.CharField(blank=True, max_length=200, null=True, verbose_name='Twitter Adresi')),
                ('userLinkedin', models.CharField(blank=True, max_length=200, null=True, verbose_name='Linkedin Adresi')),
                ('userWebsite', models.CharField(blank=True, max_length=200, null=True, verbose_name='Kişisel Sitesi')),
                ('isVerified', models.BooleanField(default=0, verbose_name='Onaylanmis Kullanici')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ForgotPasswordModel',
            fields=[
                ('forgotPassword', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('publicKey', models.UUIDField(default=uuid.uuid4)),
                ('privateKey', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('userID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='Geçmiş ID')),
                ('historyDate', models.DateTimeField(auto_now_add=True, verbose_name='Tarih')),
                ('ipAddress', models.GenericIPAddressField(null=True)),
                ('questionID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='question.QuestionModel')),
                ('userID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserLoginHistory',
            fields=[
                ('loginID', models.AutoField(primary_key=True, serialize=False, verbose_name='Giris ID')),
                ('loginDate', models.DateTimeField(auto_now_add=True, verbose_name='Giris Tarihi')),
                ('ipAddress', models.GenericIPAddressField(null=True, verbose_name='IP Adres')),
                ('location', models.TextField(null=True, verbose_name='Konum')),
                ('userAgent', models.CharField(max_length=250, null=True, verbose_name='User-Agent')),
                ('browser', models.CharField(max_length=250, null=True, verbose_name='Tarayıcı')),
                ('status', models.BooleanField(default=False, verbose_name='Durum')),
                ('userID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserVerifyModel',
            fields=[
                ('verifyID', models.AutoField(primary_key=True, serialize=False)),
                ('publicKey', models.UUIDField(default=uuid.uuid4)),
                ('privateKey', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('userID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
